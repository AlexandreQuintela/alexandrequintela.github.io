---
layout: post
title:  "Compara√ß√£o de strings"
date:   2024-07-07 10:37:55 -0300
categories: csharp
---
üêå Usar ùóßùóºùó®ùóΩùóΩùó≤ùóø() e ùóßùóºùóüùóºùòÑùó≤ùóø() para convers√£o de caso em C# pode afetar o desempenho devido √† aloca√ß√£o de mem√≥ria, c√≥pia de cadeia de caracteres e poss√≠vel coleta de lixo, especialmente em situa√ß√µes que envolvem cadeias de caracteres grandes ou convers√µes frequentes.

üöÄ ùó¶ùòÅùóøùó∂ùóªùó¥.ùóòùóæùòÇùóÆùóπùòÄ √© mais r√°pido que ToUpper() ou ToLower() devido √† compara√ß√£o direta de caracteres, evitando a aloca√ß√£o de mem√≥ria e reduzindo a sobrecarga para compara√ß√£o de strings que n√£o diferenciam mai√∫sculas de min√∫sculas.

üî• Para realizar compara√ß√£o de strings, √© melhor usar os m√©todos de compara√ß√£o integrados como ùó¶ùòÅùóøùó∂ùóªùó¥.ùóòùóæùòÇùóÆùóπùòÄ com op√ß√µes StringComparison apropriadas, que lidam corretamente com a insensibilidade a mai√∫sculas e min√∫sculas e considera√ß√µes culturais, mantendo melhor desempenho e precis√£o.
{% highlight c# %}
public bool saoIguais(string primeira, string segunda)
{
  // Compara√ß√£o lenta.
  return primeira.ToUpper() == segunda.ToUpper();
}
#=> prints 'Hi, Tom' to STDOUT.
{% endhighlight %}

{% highlight c# %}
public bool saoIguais(string primeira, string segunda)
{
  // Compara√ß√£o r√°pida.
  return string.Equals(primeira, segunda, StringComparison.OrdinalIgnoreCase);
}
{% endhighlight %}
